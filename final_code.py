# -*- coding: utf-8 -*-
"""Final code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dxZLMakC5L0fdoJPqtG3dLFYW5HcaLDa
"""

#this is for google colab, if not running it with google colab please comment this
from google.colab import files
 
 
uploaded = files.upload()

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import datetime as dt
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error # for calculating the cost function
from sklearn.svm import SVR
from sklearn.datasets import make_classification
from matplotlib import pyplot
#import requests, io
from sklearn.ensemble import RandomForestRegressor

df=pd.read_csv('Tetuan City power consumption.csv')

df.head()

df["DateTime"]=pd.to_datetime(df["DateTime"])

df["Month"]=df["DateTime"].dt.month
df["Week"]=df["DateTime"].dt.weekday
df["hour"]=df["DateTime"].dt.hour

df.head()

df.hour.unique()

df.Month.unique()

df.Week.unique()

"""#power consumption vs hour"""

sns.scatterplot(data=df, x="hour",y="Zone 1 Power Consumption")

sns.scatterplot(data=df, x="hour",y="Zone 2  Power Consumption")

sns.scatterplot(data=df, x="hour",y="Zone 3  Power Consumption")

"""#power consumption vs Week"""

sns.scatterplot(data=df, x="Week",y="Zone 1 Power Consumption")

sns.scatterplot(data=df, x="Week",y="Zone 2  Power Consumption")

sns.scatterplot(data=df, x="Week",y="Zone 3  Power Consumption")

"""#power consumption vs months"""

sns.scatterplot(data=df, x="Month",y="Zone 1 Power Consumption")

sns.scatterplot(data=df, x="Month",y="Zone 2  Power Consumption")

sns.scatterplot(data=df, x="Month",y="Zone 3  Power Consumption")

x = df[['hour','Week','Month','Temperature','Humidity','Wind Speed','general diffuse flows', 'diffuse flows']]
y = df[['Zone 1 Power Consumption', 'Zone 2  Power Consumption', 'Zone 3  Power Consumption']]

"""#LinearRegression"""

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state = 0)

lin_reg = LinearRegression(normalize=True)
lin_reg.fit(X_train,y_train)

print("Train score:")
print(lin_reg.score(X_train, y_train))

print("Test score:")
print(lin_reg.score(X_test, y_test))

y_pred = lin_reg.predict(X_test)
y_pred
rmse = float(format(np.sqrt(mean_squared_error(y_test, y_pred)),'.3f'))
print("\nRMSE:\n",rmse)

"""#SVR"""

X, y = make_classification(random_state=0)
X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.25,random_state=0)

svr = SVR().fit(X_train, y_train)
print(svr)

yfit = svr.predict(X_test)
clf = SVR()
clf = clf.fit(X_train, y_train)
s=clf.score(X_test, y_test)
s

y_pred = svr.predict(X_test)
y_pred
rmse = float(format(np.sqrt(mean_squared_error(y_test, y_pred)),'.3f'))
print("\nRMSE:\n",rmse)

"""#RandomForest"""

x = df[['hour','Week','Month','Temperature','Humidity','Wind Speed','general diffuse flows', 'diffuse flows']]
y = df[['Zone 1 Power Consumption', 'Zone 2  Power Consumption', 'Zone 3  Power Consumption']]

# Splitting the dataset into training and testing set (80/20)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 28)

model = RandomForestRegressor(n_estimators = 20, random_state = 0)
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
print(y_pred)

model.score(x_test, y_test)

rmse = float(format(np.sqrt(mean_squared_error(y_test, y_pred)),'.3f'))
print("\nRMSE:\n",rmse)

x = df[['hour','Week','Month']]#,'Temperature','Humidity','Wind Speed','general diffuse flows', 'diffuse flows']]
y = df[['Zone 1 Power Consumption', 'Zone 2  Power Consumption', 'Zone 3  Power Consumption']]
# Splitting the dataset into training and testing set (80/20)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 28)
model = RandomForestRegressor(n_estimators = 20, random_state = 0)
# Fitting the Random Forest Regression model to the data
model.fit(x_train, y_train) 
# Predicting the target values of the test set
y_pred = model.predict(x_test)
print(y_pred)
# RMSE (Root Mean Square Error)
rmse = float(format(np.sqrt(mean_squared_error(y_test, y_pred)),'.3f'))
print("\nRMSE:\n",rmse)
model.score(x_test, y_test)

x = df[['Temperature','Humidity','Wind Speed','general diffuse flows', 'diffuse flows']]
y = df[['Zone 1 Power Consumption', 'Zone 2  Power Consumption', 'Zone 3  Power Consumption']]
# Splitting the dataset into training and testing set (80/20)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 28)
model = RandomForestRegressor(n_estimators = 20, random_state = 0)
# Fitting the Random Forest Regression model to the data
model.fit(x_train, y_train) 
# Predicting the target values of the test set
y_pred = model.predict(x_test)
print(y_pred)
# RMSE (Root Mean Square Error)
rmse = float(format(np.sqrt(mean_squared_error(y_test, y_pred)),'.3f'))
print("\nRMSE:\n",rmse)
model.score(x_test, y_test)

x = df[['general diffuse flows', 'diffuse flows']]
y = df[['Zone 1 Power Consumption', 'Zone 2  Power Consumption', 'Zone 3  Power Consumption']]
# Splitting the dataset into training and testing set (80/20)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 28)
model = RandomForestRegressor(n_estimators = 20, random_state = 0)
# Fitting the Random Forest Regression model to the data
model.fit(x_train, y_train) 
# Predicting the target values of the test set
y_pred = model.predict(x_test)
print(y_pred)
# RMSE (Root Mean Square Error)
rmse = float(format(np.sqrt(mean_squared_error(y_test, y_pred)),'.3f'))
print("\nRMSE:\n",rmse)
model.score(x_test, y_test)

x = df[['Temperature','Humidity','Wind Speed']]
y = df[['Zone 1 Power Consumption', 'Zone 2  Power Consumption', 'Zone 3  Power Consumption']]
# Splitting the dataset into training and testing set (80/20)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 28)
model = RandomForestRegressor(n_estimators = 20, random_state = 0)
# Fitting the Random Forest Regression model to the data
model.fit(x_train, y_train) 
# Predicting the target values of the test set
y_pred = model.predict(x_test)
print(y_pred)
# RMSE (Root Mean Square Error)
rmse = float(format(np.sqrt(mean_squared_error(y_test, y_pred)),'.3f'))
print("\nRMSE:\n",rmse)
model.score(x_test, y_test)